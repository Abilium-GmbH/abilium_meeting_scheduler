<?xml version="1.0" encoding="utf-8"?>

<odoo>
    <template id="token_entry" name="calendar ass">
       <t t-call="web.html_container">
            <html>
                <head>
                    <style>
                        .logo{
                            position: absolute;
                            right: 0%;
                            top: 0%;
                        }
                        body {
                            background-color: #dbdbdb;
                            margin: 0;
                            position: absolute;
                            top: 50%;
                            left: 50%;
                            transform: translate(-50%, -50%);
                        }
                        .info {
                            text-align: center;
                            border: 3px solid red;
                        }
                        .title {
                            text-align: center;
                        }
                    </style>
                </head>
                <body>
                    <div class="title">
                        <br/>
                            <h1><b>Abilium Meeting Scheduler</b></h1>
                        <br/>
                    </div>
                    <div class="logo"><img src="https://www.abilium.io/abitheme/static/src/img/logo.png" alt="abilium logo"/></div>
                    <div class="info">
                        <h2>Invalid Link</h2>
                        <p>
                            The link you entered is not valid. <br/>
                            Please make sure you have the correct link and try again.
                        </p>
                    </div>
                </body>
            </html>
        </t>
    </template>

    <template id="token_ok" name="calendar ass">
        <t t-call="web.html_container">
            <html>
                <head>
                    <style>
                        .logo{
                            position: absolute;
                            right: 0%;
                            top: 0%;
                        }
                        body {
                            background-color: #dbdbdb;
                            margin: 0;
                            position: absolute;
                            top: 50%;
                            left: 50%;
                            transform: translate(-50%, -50%);
                        }
                        .info {
                            text-align: center;
                            border: 3px solid red;
                        }
                        .title {
                            text-align: center;
                        }
                    </style>
                </head>
                <body>
                    <div class="title">
                        <br/>
                            <h1><b>Abilium Meeting Scheduler</b></h1>
                        <br/>
                    </div>
                    <div class="logo"><img src="https://www.abilium.io/abitheme/static/src/img/logo.png" alt="abilium logo"/></div>
                    <div class="info">
                        <h2>Meeting Overview</h2>
                        <p>
                            <b>Start: </b><t t-esc="value.timeslots_start_date"/> <br/>
                            <b>Duration: </b><t t-esc="value.timeslots_reserved_meeting_duration"/> <br/>
                            <b>Location: </b><t t-esc="value.timeslots_reserved_location"/> <br/>
                        </p>
                        <p>To cancel your meeting, click the button below.
                            <form>
                                <form t-attf-action="/meeting_scheduler/scheduled_meeting/" method="POST">
                                    <input type="hidden" name="token" t-att-value="value.timeslots_confirmed_token"/>
                                    <input type="hidden" name="id" value="cancel"/>
                                    <input type="submit" value="Cancel Meeting"/>
                                </form>
                            </form>
                        </p>
                    </div>
                </body>
            </html>
        </t>
    </template>

    <template id="token_locktime" name="calendar ass">
        <t t-call="web.html_container">
            <html>
                <head>
                    <style>
                        .logo{
                            position: absolute;
                            right: 0%;
                            top: 0%;
                        }
                        body {
                            background-color: #dbdbdb;
                            margin: 0;
                            position: absolute;
                            top: 50%;
                            left: 50%;
                            transform: translate(-50%, -50%);
                        }
                        .info {
                            text-align: center;
                            border: 3px solid red;
                        }
                        .title {
                            text-align: center;
                        }
                    </style>
                </head>
                <body>
                    <div class="title">
                        <br/>
                            <h1><b>Abilium Meeting Scheduler</b></h1>
                        <br/>
                    </div>
                    <div class="logo"><img src="https://www.abilium.io/abitheme/static/src/img/logo.png" alt="abilium logo"/></div>
                    <div class="info">
                        <h2>Meeting Overview</h2>
                        <p>
                            <b>Start: </b><t t-esc="value.timeslots_start_date"/> <br/>
                            <b>Duration: </b><t t-esc="value.timeslots_reserved_meeting_duration"/> <br/>
                            <b>Location: </b><t t-esc="value.timeslots_reserved_location"/> <br/>
                        </p>
                        <p>
                            Meetings cannot be cancelled <t t-esc="locktime"/> before the start.
                        </p>
                    </div>
                </body>
            </html>
        </t>
    </template>

    <template id="token_deleted" name="calendar ass">
        <t t-call="web.html_container">
            <html>
                <head>
                    <style>
                        .logo{
                            position: absolute;
                            right: 0%;
                            top: 0%;
                        }
                        body {
                            background-color: #dbdbdb;
                            margin: 0;
                            position: absolute;
                            top: 50%;
                            left: 50%;
                            transform: translate(-50%, -50%);
                        }
                        .info {
                            text-align: center;
                            border: 3px solid red;
                        }
                        .title {
                            text-align: center;
                        }
                    </style>
                </head>
                <body>
                    <div class="title">
                        <br/>
                            <h1><b>Abilium Meeting Scheduler</b></h1>
                        <br/>
                    </div>
                    <div class="logo"><img src="https://www.abilium.io/abitheme/static/src/img/logo.png" alt="abilium logo"/></div>
                    <div class="info">
                        <h2>Meeting cancelled</h2>
                        <p>
                            Your meeting has been successfully cancelled.
                        </p>
                    </div>
                </body>
            </html>
        </t>
    </template>

    <template id="guest_view_loop" name="calendar assets">
        <t t-call="web.html_container">
            <html>
                <head>
                        <style>
                            table {color: black;
                            }
                            body {
                                margin: 0;
                                position: absolute;
                                top: 50%;
                                left: 40%;
                                transform: translate(-50%, -50%);
                            }
                            tr:nth-child(odd){background-color:#c3edfa;}
                            tr:nth-child(even){background-color:#dbdbdb;}
                            .logo{
                                position: absolute;
                                right: -20%;
                                top: 0%;
                            }
                            th, td{padding: 5px;}
                            .welcomeText{
                                text-align: center;
                            }
                            .timeslots {
                                test-align: center;
                            }
                            .dropdownfields {
                                display: flex;
                            }
                        </style>
                </head>
                <body>
                    <div class="welcomeText">
                        <h1><b>Abilium Meeting Scheduler</b></h1>
                        <p>Please select the timeslot, that is most convenient for you.</p>
                        <br/>
                        <h2>Available Timeslots</h2>
                    </div>

                    <div class="logo"><img src="https://www.abilium.io/abitheme/static/src/img/logo.png" alt="abilium logo"/></div>
                    <div class="timeslots">
                        <form>
                            <form t-attf-action="/meeting_scheduler/guest_view/update" method="POST">
                                <table>
                                    <tr>
<!--                                        <th>#</th>-->
                                        <th>Slot Start</th>
                                        <th>Slot End</th>
                                        <th>Meeting Start</th>
                                        <th>Duration</th>
                                        <th>
                                            <label for="firstname">First Name</label>
                                        </th>
                                        <th>
                                            <label for="lastname">Last Name</label>
                                        </th>
                                        <th>
                                            <label for="companyname">Company Name</label>
                                        </th>
                                        <th>
                                            <label for="email">E-Mail</label>
                                        </th>
                                        <th></th>
                                    </tr>
                                    <t t-foreach="value" t-as="i">
                                        <tr>
                                            <form>
                                                <form t-attf-action="/meeting_scheduler/guest_view/update/"
                                                      method="POST">
<!--                                                    <td t-esc="i.id"/>-->
                                                    <input type="hidden" name="id" t-att-value="i.id"/>

                                                    <!--    <<<<<<< Tasks-99
                                                    <input type="hidden" name="timeslots_start_date_utc"
                                                           t-att-value="i.timeslots_start_date_utc"/>
                                                    <input type="hidden" name="timeslots_end_date_utc"
                                                           t-att-value="i.timeslots_end_date_utc"/>
                                                        >>>>>>> Tasks-99-->

                                                    <td t-esc="i.timeslots_start_date_str"/>
                                                    <td t-esc="i.timeslots_end_date_str"/>
                                                    <td>
                                                        <div class="dropdownfields">
                                                            <select class="sel_start_h" t-att-data-id="i.id"
                                                                    name="sel_start_h" t-att-value="i.timeslots_start_date_str">
                                                                <!--split separates the string on the whitespaces and list treats it as a list-->
                                                                <t t-foreach="list(i.timeslots_bookable_hours.split())"
                                                                   t-as="item">
                                                                    <option t-att-value="item">
                                                                        <t t-esc="item"/>
                                                                    </option>
                                                                </t>
                                                            </select>:
                                                            <select class="sel_start_min" t-att-data-id="i.id"
                                                                    name="sel_start_min" t-att-value="i.timeslots_start_date_str">
                                                                <t t-foreach="list(i.timeslots_time_min_start.split())"
                                                                   t-as="t_min">
                                                                    <option t-att-value="t_min">
                                                                        <t t-esc="t_min"/>
                                                                    </option>
                                                                </t>
                                                            </select>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="dropdownfields">
                                                            <select class="sel_duration_h" t-att-data-id="i.id"
                                                                    name="sel_duration_h" t-att-value="i.timeslots_end_date_str">
                                                                <t t-foreach="list(i.timeslots_duration_hours.split())"
                                                                   t-as="item_duration">
                                                                    <option t-att-value="item_duration">
                                                                        <t t-esc="item_duration"/>
                                                                    </option>
                                                                </t>
                                                            </select>:
                                                            <select class="sel_duration_min" t-att-data-id="i.id"
                                                                    name="sel_duration_min" t-att-value="i.timeslots_end_date_str">
                                                                <t t-foreach="list(i.timeslots_time_min_end.split())"
                                                                   t-as="t_min_duration">
                                                                    <option t-att-value="t_min_duration">
                                                                        <t t-esc="t_min_duration"/>
                                                                    </option>
                                                                </t>
                                                            </select>
                                                        </div>
                                                    </td>
                                                    <!--    TODO the link back to the meeting scheduler is currently hardcoded and needs to be adjusted for demo-->
                                                    <!--    <th><button type="button" onclick="window.location.href='http://localhost:8069/web#menu_id=188';">reserve this timeslot</button></th>-->
                                                    <td>
                                                        <input type="text" id="firstname" name="firstname"/>
                                                    </td>
                                                    <td>
                                                        <input type="text" id="lastname" name="lastname"/>
                                                    </td>
                                                    <td>
                                                        <input type="text" id="companyname" name="companyname"/>
                                                    </td>
                                                    <td>
                                                        <input type="text" id="email" name="email"/>
                                                    </td>
                                                    <td>
                                                        <input type="submit" t-att-value="Submit"/>
                                                    </td>
                                                </form>
                                            </form>
                                        </tr>
                                    </t>
                                </table>
                            </form>
                        </form>
                    </div>
 <!--    <<<<<<< Tasks-99-->
                    <script>
                        <!-- Zugriff auf alle Elemente mit der Klasse "sel_start_h", "sel_duration_h", "sel_duration_min" und "sel_start_min". -->
                        const selStartH = document.querySelectorAll('.sel_start_h');
                        const selDurationH = document.querySelectorAll('.sel_duration_h');
                        const selDurationMin = document.querySelectorAll('.sel_duration_min');
                        const selStartMin = document.querySelectorAll('.sel_start_min');

                        <!--Adjusts the values of sel_start_min when loading the web page so that you cannot start an appointment too early.-->
                        window.onload = function() {
                                const minutes = [];
                                const dataIds = [];
                                const listStartH = [];

                                for (const element of selStartMin) {
                                    dataIds.push(element.getAttribute('data-id'));
                                    minutes.push(new Date(element.getAttribute('value')).getMinutes());
                                }

                                for (let i = 0; dataIds.length > i; i++) {
                                    const listStartMin = Array.from(selStartMin).find(
                                        (element) => element.getAttribute('data-id') === dataIds[i]);
                                    const listStartH = Array.from(selStartH).find(
                                        (element) => element.getAttribute('data-id') === dataIds[i]);
                                    const listDurationH = Array.from(selDurationH).find(
                                        (element) => element.getAttribute('data-id') === dataIds[i]);

                                    if (60 > minutes[i]) {
                                        if (45 > minutes[i]) {
                                            if (30 > minutes[i]) {
                                                if (15 > minutes[i]) {
                                                    if (minutes[i] === 0){
                                                        for (let j = 0; j > minutes[j]; j++){
                                                            listStartMin[j].disabled = false;
                                                        }
                                                    }
                                                    else {
                                                    listStartMin[0].disabled = true;
                                                    }
                                                }
                                                else {
                                                    listStartMin[0].disabled = true;
                                                    listStartMin[1].disabled = true;
                                                }

                                            } else {
                                                listStartMin[0].disabled = true;
                                                listStartMin[1].disabled = true;
                                            }
                                        }else {
                                            listStartH[0].disabled = true;
                                            listDurationH[listDurationH.length-1].disabled = true;
                                        }
                                    }
                                }
                        }

                            <!--Resets all values when you reload the website.-->
                            window.addEventListener('load', () => {
                                const selStartH = document.querySelectorAll('.sel_start_h');
                                const selDurationH = document.querySelectorAll('.sel_duration_h');
                                const selDurationMin = document.querySelectorAll('.sel_duration_min');
                                const selStartMin = document.querySelectorAll('.sel_start_min');
                                const startMinIndex = [];

                                selStartH.forEach((element) => {
                                    const dataId = element.getAttribute('data-id');
                                    const listStartH = Array.from(selStartH).find(
                                        (element) => element.getAttribute('data-id') === dataId);

                                    if (listStartH[0].disabled === true){element.selectedIndex = 1;}
                                    else {element.selectedIndex = 0;}
                                });
                                selDurationMin.forEach((element) => {
                                    element.selectedIndex = 0;
                                });
                                selStartMin.forEach((element) => {
                                    const minutes = [];
                                    minutes.push(new Date(element.getAttribute('value')).getMinutes());
                                    if (60 > minutes[0]) {
                                        if (45 > minutes[0]) {
                                            if (30 > minutes[0]) {
                                                if (15 > minutes[0]) {
                                                    if (minutes[0] === 0){element.selectedIndex = 0;startMinIndex.push(0);}
                                                    else {element.selectedIndex = 1;startMinIndex.push(1);}
                                                }
                                                else{element.selectedIndex = 2;startMinIndex.push(2);}
                                            }
                                            else {element.selectedIndex = 2;startMinIndex.push(2);}
                                        }
                                        else if (45 === minutes[0]){element.selectedIndex = 3;startMinIndex.push(3);}
                                        else {element.selectedIndex = 0;startMinIndex.push(0);}
                                    }
                                });
                                let n = 0;
                                selDurationH.forEach((element) => {
                                    const dataId = element.getAttribute('data-id');
                                    const minutes = [];
                                    minutes.push(new Date(element.getAttribute('value')).getMinutes());
                                    const matchingDurationElement = Array.from(selDurationH).find(
                                        (element) => element.getAttribute('data-id') === dataId);

                                    if (60 > minutes[0]) {
                                        if (45 > minutes[0]) {
                                            if (30 >= minutes[0]) {
                                                if (15 >= minutes[0]) {
                                                    if (minutes[0] === 0){if (startMinIndex[n] > 0){matchingDurationElement[matchingDurationElement.length-1].disabled = true;}}
                                                    else {if (startMinIndex[n] > 1){matchingDurationElement[matchingDurationElement.length-1].disabled = true;}}
                                                }
                                                else {if (startMinIndex[n] > 2){matchingDurationElement[matchingDurationElement.length-1].disabled = true;}}
                                            }
                                            else {if (startMinIndex[n] > 2){matchingDurationElement[matchingDurationElement.length-1].disabled = true;}}
                                        }
                                        else {if (startMinIndex[n] > 3){matchingDurationElement[matchingDurationElement.length-1].disabled = true;}}
                                    }
                                    n++;
                                    element.selectedIndex = 0;
                                });
                            });

                        <!--Resets all values when you change the start time in sel_start_h.-->
                            selStartH.forEach((element) => {
                                element.addEventListener('change', (event) => {

                                    const selectedElement = event.target;


                                    const selectedId = selectedElement.getAttribute('data-id');


                                    const matchingDurationElement = Array.from(selDurationH).find(
                                        (element) => element.getAttribute('data-id') === selectedId
                                    );
                                    const matchingDurationElementIndex = (Array.from(selDurationH).find(
                                                (el) => el.getAttribute('data-id') === selectedId)).selectedIndex;


                                    const matchingDurationElementMin = Array.from(selDurationMin).find(
                                        (element) => element.getAttribute('data-id') === selectedId
                                    );
                                    const matchingDurationElementMinIndex = (Array.from(selDurationMin).find(
                                                (el) => el.getAttribute('data-id') === selectedId)).selectedIndex;


                                    const matchingStartElementMin = Array.from(selStartMin).find(
                                        (element) => element.getAttribute('data-id') === selectedId
                                    );
                                    const matchingStartElementMinIndex = (Array.from(selStartMin).find(
                                                (el) => el.getAttribute('data-id') === selectedId)).selectedIndex;


                                    if (selectedId === matchingDurationElement.getAttribute('data-id')) {

                                        matchingDurationElement.selectedIndex = 0;
                                        matchingDurationElementMin.selectedIndex = 0;
                                        matchingStartElementMin.selectedIndex = 0;
                                    }
                                });
                            });

                        <!--Adjusts the duration selection when changing the start time in sel_start_h.-->
                            selStartH.forEach((element) => {
                                element.addEventListener('change', (event) => {


                                    const selectedElement = event.target;


                                    const selectedId = selectedElement.getAttribute('data-id');


                                    const matchingDurationElement = Array.from(selDurationH).find(
                                        (element) => element.getAttribute('data-id') === selectedId
                                    );


                                    if (selectedId === matchingDurationElement.getAttribute('data-id')) {
                                        const selectedIndex = selectedElement.selectedIndex;
                                        const options = matchingDurationElement.options;
                                        for (let i = 0, k = options.length - 1; options.length > i; i++) {
                                            if (selectedIndex > i) {
                                                options[k].disabled = true;
                                            } else {
                                                options[k].disabled = false;
                                            }
                                            k--;
                                        }

                                        const matchingDurationElementMin = Array.from(selDurationMin).find(
                                            (element) => element.getAttribute('data-id') === selectedId
                                        );

                                        if (selectedIndex === options.length - 1) {
                                            for (let i = 0, t = matchingDurationElementMin.length -1; matchingDurationElementMin.length - 1  > i; i++) {
                                                matchingDurationElementMin[t].disabled = true;
                                                matchingDurationElementMin.selectedIndex = 0;
                                                t -= 1;
                                            }
                                        } else {
                                            for (let i = 0; matchingDurationElementMin.length > i; i++) {
                                                matchingDurationElementMin[i].disabled = false;
                                            }
                                        }
                                    }
                                });
                            });

                        <!--Adjusts the sel_duration_min to the end time when you change the sel_duration_h so that you cannot select a time that is too long.-->
                            selDurationH.forEach((element) => {
                                element.addEventListener('change', (event) => {
                                    const selectedElement = event.target;
                                    const selectedId = selectedElement.getAttribute('data-id');
                                    const matchingDurationElementMin = Array.from(selDurationMin).find(
                                        (element) => element.getAttribute('data-id') === selectedId
                                    );
                                    const minutes = new Date(element.getAttribute('value')).getMinutes();
                                    let startMinElementIndex = 0;
                                    let startHElementIndex = 0;


                                    for (const element of selStartH) {
                                        if (selectedId === element.getAttribute('data-id')){
                                            startHElementIndex = (Array.from(selStartH).find(
                                                (el) => el.getAttribute('data-id') === selectedId)).selectedIndex;
                                        }
                                    }

                                    const startMinutes = [];
                                    for (const element of selStartMin) {
                                        if (selectedId === element.getAttribute('data-id')){
                                            startMinutes.push(new Date(element.getAttribute('value')).getMinutes());
                                            startMinElementIndex = (Array.from(selStartMin).find(
                                                (el) => el.getAttribute('data-id') === selectedId)).selectedIndex;
                                        }
                                    }
                                    let startMin = startMinElementIndex * 15;

                                    if (startMinElementIndex === 0){
                                        <!-- wenn die ausgewählte duration die maximale anzahl studen ist passt es die duration min an-->
                                        if (selectedElement.selectedIndex === selectedElement.length - 1) {
                                            for (let i = 0, t = matchingDurationElementMin.length - 1; matchingDurationElementMin.length - 1 > i; i++) {
                                                matchingDurationElementMin[t].disabled = true;
                                                matchingDurationElementMin.selectedIndex = 0;
                                                t -= 1;
                                            }
                                            if (minutes >= 15) {
                                                matchingDurationElementMin[0].disabled = false;
                                                matchingDurationElementMin[1].disabled = false;
                                                if (minutes >= 30) {
                                                    matchingDurationElementMin[2].disabled = false;
                                                    if (minutes >= 45) {
                                                        matchingDurationElementMin[3].disabled = false;
                                                    }
                                                }
                                            }
                                        }
                                        <!-- wenn man die surationH aus wählt und sie die max mögliche ist anhanden der startH-->
                                        else if (selectedElement.selectedIndex === selectedElement.length - 1 - startHElementIndex) {
                                            for (let i = 0, t = matchingDurationElementMin.length - 1; matchingDurationElementMin.length - 1 > i; i++) {
                                                matchingDurationElementMin[t].disabled = true;
                                                matchingDurationElementMin.selectedIndex = 0;
                                                t -= 1;
                                            }
                                            if (minutes >= 15) {
                                                matchingDurationElementMin[0].disabled = false;
                                                matchingDurationElementMin[1].disabled = false;
                                                if (minutes >= 30) {
                                                    matchingDurationElementMin[2].disabled = false;
                                                    if (minutes >= 45) {
                                                        matchingDurationElementMin[3].disabled = false;
                                                    }
                                                }
                                            }
                                        }
                                        <!-- wenn man eine andere duration auswählt welche nicht die max duration ist-->
                                        else {
                                            for (let i = 0; matchingDurationElementMin.length > i; i++) {
                                                matchingDurationElementMin[i].disabled = false;
                                            }
                                        }
                                    }
                                    else {
                                        <!-- wenn die ausgewählte duration die maximale anzahl studen ist passt es die duration min an-->
                                        if ((minutes - startMin) === 0){
                                            if (selectedElement.selectedIndex === selectedElement.length - 1) {
                                                for (let i = 0, t = matchingDurationElementMin.length - 1; matchingDurationElementMin.length - 1 > i; i++) {
                                                    matchingDurationElementMin[t].disabled = true;
                                                    matchingDurationElementMin.selectedIndex = 0;
                                                    t -= 1;
                                                }
                                            }
                                            <!-- wenn man die surationH aus wählt und sie die max mögliche ist anhanden der startH-->
                                            else if (selectedElement.selectedIndex === selectedElement.length - 1 - startHElementIndex) {
                                                for (let i = 0, t = matchingDurationElementMin.length - 1; matchingDurationElementMin.length - 1 > i; i++) {
                                                    matchingDurationElementMin[t].disabled = true;
                                                    matchingDurationElementMin.selectedIndex = 0;
                                                    t -= 1;
                                                }
                                            }
                                            <!-- wenn man eine andere duration auswählt welche nicht die max duration ist-->
                                            else {
                                                for (let i = 0; matchingDurationElementMin.length > i; i++) {
                                                    matchingDurationElementMin[i].disabled = false;
                                                }
                                            }
                                        }
                                        else if ((minutes - startMin) > 0){
                                            for (let i = 0, t = matchingDurationElementMin.length - 1; matchingDurationElementMin.length - 1 > i; i++) {
                                                matchingDurationElementMin[t].disabled = true;
                                                matchingDurationElementMin.selectedIndex = 0;
                                                t -= 1;
                                            }
                                            if (selectedElement.selectedIndex === selectedElement.length - 1) {
                                                if ((minutes - startMin) >= 15) {
                                                    matchingDurationElementMin[0].disabled = false;
                                                    matchingDurationElementMin[1].disabled = false;
                                                    if ((minutes - startMin) >= 30) {
                                                        matchingDurationElementMin[2].disabled = false;
                                                        if ((minutes - startMin) >= 45) {
                                                            matchingDurationElementMin[3].disabled = false;
                                                        }
                                                    }
                                                }
                                            }
                                            else if (selectedElement.selectedIndex === selectedElement.length - 1 - startHElementIndex) {
                                                if ((minutes - startMin) >= 15) {
                                                    matchingDurationElementMin[0].disabled = false;
                                                    matchingDurationElementMin[1].disabled = false;
                                                    if ((minutes - startMin) >= 30) {
                                                        matchingDurationElementMin[2].disabled = false;
                                                        if ((minutes - startMin) >= 45) {
                                                            matchingDurationElementMin[3].disabled = false;
                                                        }
                                                    }
                                                }
                                            }
                                            <!-- wenn man eine andere duration auswählt welche nicht die max duration ist-->
                                            else {
                                                for (let i = 0; matchingDurationElementMin.length > i; i++) {
                                                    matchingDurationElementMin[i].disabled = false;
                                                }
                                            }
                                        }
                                        <!-- -->
                                        else if (0 > (minutes - startMin)){
                                            const reverseMinutes = (minutes - startMin) + 60;
                                            for (let i = 0, t = matchingDurationElementMin.length - 1; matchingDurationElementMin.length - 1 > i; i++) {
                                                matchingDurationElementMin[t].disabled = true;
                                                t -= 1;
                                            }
                                            if (selectedElement.selectedIndex === selectedElement.length - 2) {
                                                if (reverseMinutes >= 15) {
                                                    matchingDurationElementMin[0].disabled = false;
                                                    matchingDurationElementMin[1].disabled = false;
                                                    if (reverseMinutes >= 30) {
                                                        matchingDurationElementMin[2].disabled = false;
                                                        if (reverseMinutes >= 45) {
                                                            matchingDurationElementMin[3].disabled = false;
                                                        }
                                                    }
                                                }
                                            }
                                            else if (selectedElement.selectedIndex === selectedElement.length - 2 - startHElementIndex) {
                                                if (reverseMinutes >= 15) {
                                                    matchingDurationElementMin[0].disabled = false;
                                                    matchingDurationElementMin[1].disabled = false;
                                                    if (reverseMinutes >= 30) {
                                                        matchingDurationElementMin[2].disabled = false;
                                                        if (reverseMinutes >= 45) {
                                                            matchingDurationElementMin[3].disabled = false;
                                                        }
                                                    }
                                                }
                                            }
                                            <!-- wenn man eine andere duration auswählt welche nicht die max duration ist-->
                                            else {
                                                for (let i = 0; matchingDurationElementMin.length > i; i++) {
                                                    matchingDurationElementMin[i].disabled = false;
                                                }
                                            }
                                        }
                                    }
                                });
                            });


                            <!--Adjusts the selection of sel_start_min according to the selection of sel_start_h so that you cannot book a date that is too early.-->
                            selStartH.forEach((element) => {
                                element.addEventListener('change', (event) => {

                                    const selectedElement = event.target;
                                    const selectedId = selectedElement.getAttribute('data-id');
                                    const selectedIndex = selectedElement.selectedIndex;
                                    var setIndex = 0;
                                    const listStartMin = Array.from(selStartMin).find(
                                        (element) => element.getAttribute('data-id') === selectedId);
                                    const minutes = new Date(element.getAttribute('value')).getMinutes();

                                    if (selectedIndex === 0) {
                                        if (60 > minutes) {
                                            if (45 > minutes) {
                                                if (30 > minutes) {
                                                    if (15 > minutes) {
                                                        if (0 === minutes){
                                                            for (let i = 0; listStartMin.length > i; i++) {
                                                                listStartMin[i].disabled = false;
                                                            }
                                                            listStartMin.selectedIndex = 0;
                                                            setIndex = 0;
                                                        }
                                                        else {
                                                        listStartMin[0].disabled = true;
                                                        listStartMin.selectedIndex = 1;
                                                        setIndex = 1;
                                                        }
                                                    }
                                                    else {
                                                        listStartMin[0].disabled = true;
                                                        listStartMin[1].disabled = true;
                                                        listStartMin.selectedIndex = 2;
                                                        setIndex = 2;
                                                    }
                                                } else {
                                                    listStartMin[0].disabled = true;
                                                    listStartMin[1].disabled = true;
                                                    listStartMin.selectedIndex = 2;
                                                    setIndex = 2;
                                                }
                                            } else {
                                                listStartMin[0].disabled = true;
                                                listStartMin[1].disabled = true;
                                                listStartMin[2].disabled = true;
                                                listStartMin.selectedIndex = 3;
                                                setIndex = 3;
                                            }
                                        }
                                    } else {
                                        for (let i = 0; listStartMin.length > i; i++) {
                                            listStartMin[i].disabled = false;
                                        }
                                    }
                                    const endMinutes = [];
                                    for (const element of selDurationMin) {
                                        if (selectedId === element.getAttribute('data-id')){
                                            endMinutes.push(new Date(element.getAttribute('value')).getMinutes());
                                        }
                                    }
                                    const durationH = Array.from(selDurationH).find(
                                        (element) => element.getAttribute('data-id') === selectedId);

                                    if (60 > endMinutes[0]) {
                                        if (45 >= endMinutes[0]) {
                                            if (30 >= endMinutes[0]) {
                                                if (15 >= endMinutes[0]) {
                                                    if (endMinutes[0] === 0){if (setIndex > 0){durationH[durationH.length-1].disabled = true;}}
                                                    else {if (setIndex > 1){durationH[durationH.length-1].disabled = true;}}
                                                }
                                            }
                                            else {if (setIndex > 2){durationH[durationH.length-1].disabled = true;}}
                                        }
                                        else {if (setIndex > 3){durationH[durationH.length-1].disabled = true;}}
                                    }

                                });
                            });
                            <!-- korriegier die durationH wenn man die startMin auswählt-->
                            selStartMin.forEach((element) => {
                                element.addEventListener('change', (event) => {
                                    const selectedElement = event.target;
                                    const selectedId = selectedElement.getAttribute('data-id');
                                    const minIndex = selectedElement.selectedIndex;

                                    const endMinutes = [];
                                    for (const element of selDurationMin) {
                                        if (selectedId === element.getAttribute('data-id')){
                                            endMinutes.push(new Date(element.getAttribute('value')).getMinutes());
                                        }
                                    }
                                    var min1 = minIndex * 15;
                                    var min2 = endMinutes[0];
                                    const startMin = new Date(element.getAttribute('value')).getMinutes();
                                    const durationH = Array.from(selDurationH).find(
                                        (element) => element.getAttribute('data-id') === selectedId);
                                    const durationIndex = (durationH.length -1) - ((Array.from(selStartH).find(
                                                (el) => el.getAttribute('data-id') === selectedId)).selectedIndex);

                                    <!-- korrigiert die duration h wenn start min ausgewählt wird  -->
                                    if (min1 > min2){
                                        durationH[durationIndex].disabled = true;
                                        if ( durationIndex === (Array.from(selDurationH).find(
                                                (el) => el.getAttribute('data-id') === selectedId)).selectedIndex){
                                            durationH.selectedIndex = durationIndex - 1;
                                        }
                                    }

                                    else {
                                        durationH[durationIndex].disabled = false;
                                    }
                                    durationH.dispatchEvent(new Event('change'));
                                });
                            });
                    </script>


 <!--    <<<<<<< Tasks-99-->

                </body>
            </html>
        </t>
    </template>

    <template id="guest_view_confirm" name="reservation confirmation">
        <t t-call="web.html_container">
            <html>
                <head>
                    <style>
                        .logo{
                            position: absolute;
                            right: 0%;
                            top: 0%;
                        }
                        body {
                            background-color: #ccffcc;
                            margin: 0;
                            position: absolute;
                            top: 50%;
                            left: 50%;
                            transform: translate(-50%, -50%);
                        }
                        .info {
                            text-align: center;
                            border: 3px solid green;
                        }
                        .title {
                            text-align: center;
                        }
                    </style>
                </head>
                <body>
                    <div class="title">
                        <br/>
                            <h1><b>Abilium Meeting Scheduler</b></h1>
                        <br/>
                    </div>
                    <div class="logo"><img src="https://www.abilium.io/abitheme/static/src/img/logo.png" alt="abilium logo"/></div>
                    <div class="info">
                        <h2>Reservation received</h2>
                        <p>
                            Reservation: <br/>
                            <b>Start: </b><t t-esc="converted_start_date"/> <br/>
                            <b>Duration: </b><t t-esc="value.timeslots_reserved_meeting_duration"/> <br/>
                            <b>Location: </b>The Location will be provided in the confirmation e-mail. <br/>
                        </p>
                        <p>
                            Your informations: <br/>
                            <b>Name: </b><t t-esc="value.firstname"/> <t t-esc="value.lastname"/> <br/>
                            <b>Company: </b><t t-esc="value.companyname"/> <br/>
                            <b>E-Mail: </b><t t-esc="value.email"/> <br/>
                        </p>
                        <p>
                            Your meeting concerns: <br/>
                            <b>Title: </b><t t-esc="value.meeting_title"/> <br/>
                            <b>Subject: </b><t t-esc="value.timeslots_reserved_meeting_subject"/> <br/>
                        </p>
                    </div>
                </body>
            </html>
        </t>
    </template>
    <template id="guest_view_error" name="reservation error">
        <t t-call="web.html_container">
            <html>
                <head>
                    <style>
                        .logo{
                            position: absolute;
                            right: 0%;
                            top: 0%;
                        }
                        body {
                            background-color: #ff6666;
                            margin: 0;
                            position: absolute;
                            top: 50%;
                            left: 50%;
                            transform: translate(-50%, -50%);
                        }
                        .info {
                            text-align: center;
                            border: 3px solid black;
                        }
                        .title {
                            text-align: center;
                        }
                    </style>
                </head>
                <body>
                    <div class="title">
                        <br/>
                            <h1><b>Abilium Meeting Scheduler</b></h1>
                        <br/>
                    </div>
                    <div class="logo"><img src="https://www.abilium.io/abitheme/static/src/img/logo.png" alt="abilium logo"/></div>
                    <div class="info">
                        <h2>Something went wrong</h2>
                        <p>
                            Please try again:
                            <br/><br/>
                            <button onclick="window.location.href='http://localhost:8069/meeting_scheduler/guest_view/';">Go Back!</button>
                        </p>
                    </div>
                </body>
            </html>
        </t>
    </template>


    <!-- menu actions -->
    <record id="view_action" model="ir.actions.act_window">
        <field name="name">Abilium Meeting Scheduler</field>
        <field name="type">ir.actions.act_window</field>
        <field name="res_model">meeting_scheduler</field>
        <field name="view_mode">tree,kanban,form</field>
    </record>

    <data>
        <!-- explicit form view definition -->
        <record id="meeting_scheduler_form" model="ir.ui.view">
            <field name="name">meeting_scheduler.form</field>
            <field name="model">meeting_scheduler</field>
            <field name="arch" type="xml">

                <form>
                    <header>
                        <button name="%(view_action)d" type="action"
                                string="Go back"/>
                    </header>
                    <sheet>
                        <group>
                            <group>
                                <field name="meeting_title"/>
<!--                                #TODO add functionality to handle different locations-->
<!--                                <field name="meeting_location"/>-->
                                <field name="meeting_show_as"/>
                                <field name="meeting_privacy"/>
                              </group>
                           <group>
                               <field name="meeting_start_date" widget="daterange" options="{'related_end_date': 'meeting_end_date'}" />
                               <field name="meeting_end_date" widget="daterange" options="{'related_start_date': 'meeting_start_date'}"/>
                               <field name="meeting_duration" />
                               <field name="meeting_repetitions"/>
                               <field name="meeting_frequency"/>
                            </group>
                        </group>
                    </sheet>
                </form>
            </field>
        </record>

        <!-- explicit list view definition -->
        <record model="ir.ui.view" id="meeting_scheduler_list">
            <field name="name">meeting_scheduler list</field>
            <field name="model">meeting_scheduler</field>
            <field name="arch" type="xml">
                <tree>
                    <field name="meeting_title"/>
                    <field name="meeting_start_date"/>
                    <field name="meeting_end_date"/>
<!--                    #TODO add functionality to handle different locations-->
<!--                    <field name="meeting_location"/>-->
                    <field name="meeting_duration"/>
                    <field name="meeting_frequency"/>
                    <field name="meeting_privacy"/>
                    <field name="meeting_show_as"/>

                </tree>
            </field>

        </record>
    </data>


        <!-- second menu action-->
    <record id="group_action" model="ir.actions.act_window">
        <field name="name">Group Stage</field>
        <field name="type">ir.actions.act_window</field>
        <field name="res_model">group_scheduler</field>
        <field name="view_mode">tree,kanban,form</field>
    </record>


    <!-- explicit form view definition second item -->
    <data>
        <record id="group_scheduler_form" model="ir.ui.view">
            <field name="name">group_scheduler.form</field>
            <field name="model">group_scheduler</field>
            <field name="arch" type="xml">

                <form>
                    <header>
                        <button name="%(group_action)d" type="action"
                                string="Go back"/>
                    </header>
                    <sheet>
                        <group>
                            <field name="meeting_group"/>
                            <field name="meeting_attendees" />
                        </group>
                    </sheet>
                </form>
            </field>
        </record>



        <!-- explicit list view definition second item -->
        <record model="ir.ui.view" id="group_scheduler_list">
            <field name="name">group_scheduler list</field>
            <field name="model">group_scheduler</field>
            <field name="arch" type="xml">

                <tree>
                    <header>
<!--                    for tree header buttons no id, states, confirm
                        class="btn-primary" makes it blue -->
<!--                        <button name="button_function_test" string="Get free slots from calendar of selected Groups"-->
<!--                             class="btn-primary" type="object"/>-->

<!--                        <button name="%(view_action)d" type="action"-->
<!--                                string="Go back to Calendar view" class="btn-primary"/>-->

                        <button name="open_time_form" string="Continue with selection"
                             class="btn-primary" type="object"/>
<!--                        <button name="action_from_view" string="Open View" type="object"/>-->

                    </header>
                    <field name="meeting_group"/>
                    <field name="meeting_attendees"/>
                </tree>

            </field>

        </record>

    </data>

            <!-- third menu action-->
    <record id="stuff_action" model="ir.actions.act_window">
        <field name="name">Group Stage</field>
        <field name="type">ir.actions.act_window</field>
        <field name="res_model">print_table</field>
        <field name="view_mode">tree,kanban,form</field>
    </record>

        <!-- explicit list view definition third item -->
    <data>
        <record model="ir.ui.view" id="print_table_list">
            <field name="name">print_table list</field>
            <field name="model">print_table</field>
            <field name="arch" type="xml">

                <tree>
                    <field name="show_stuff"/>
                </tree>

            </field>

        </record>
    </data>

            <!-- fourth menu action-->
    <record id="timeslots_action" model="ir.actions.act_window">
        <field name="name">Timeslots</field>
        <field name="type">ir.actions.act_window</field>
        <field name="res_model">timeslots</field>
        <field name="view_mode">tree,kanban,form</field>
    </record>
        <!-- explicit list view definition second item -->
    <data>
        <record model="ir.ui.view" id="timeslot_list">
            <field name="name">Timeslot list</field>
            <field name="model">timeslots</field>
            <field name="arch" type="xml">

                <tree create="false">
                    <field name="timeslots_groupmembers"/>
                    <field name="timeslots_start_date_utc"/>
                    <field name="timeslots_end_date_utc"/>
                    <field name="timeslots_start_date_str"/>
                    <field name="timeslots_end_date_str"/>
                </tree>


            </field>

        </record>
    </data>

            <!-- fifth menu action-->
    <record id="timeslots_reserved_action" model="ir.actions.act_window">
        <field name="name">Reserved Timeslots</field>
        <field name="type">ir.actions.act_window</field>
        <field name="res_model">timeslots_reserved</field>
        <field name="view_mode">tree,form</field>
    </record>
        <!-- explicit list view definition second item -->
    <data>
        <record model="ir.ui.view" id="timeslot_reserved_list">
            <field name="name">Timeslot list</field>
            <field name="model">timeslots_reserved</field>
            <field name="arch" type="xml">

                <tree create="false">
                    <header>
                        <button name="open_confirm_form" string="Continue with selection"
                             class="btn-primary" type="object"/>
                    </header>
                    <field name="meeting_title"/>
                    <field name="firstname"/>
                    <field name="lastname"/>
                    <field name="companyname"/>
                    <field name="email"/>
                    <field name="timeslots_start_date"/>
                    <field name="timeslots_end_date"/>
                </tree>


            </field>

        </record>

        <record model="ir.ui.view" id="timeslot_reserved_form">
            <field name="name">Timeslot form</field>
            <field name="model">timeslots_reserved</field>
            <field name="arch" type="xml">
                <form save="false" edit="false" create="false">
                    <header>
                        <button name="open_confirm_form"
                                type="object"
                                string="Handle meeting request"
                                class="btn-primary"/>
                    </header>
                    <sheet>
                        <group>
                            <group>
                                <field name="meeting_title"/>
                                <field name="timeslots_start_date"/>
                                <field name="timeslots_reserved_meeting_duration"/>
                                <field name="timeslots_reserved_location"/>
                              </group>
                           <group>
                                <field name="firstname"/>
                                <field name="lastname"/>
                                <field name="companyname"/>
                                <field name="email"/>
                            </group>
                        </group>
                        <group>
                            <field name="timeslots_reserved_meeting_subject"/>
                        </group>
                    </sheet>
                </form>
            </field>
        </record>
    </data>



    <!-- fifth menu action-->
    <record id="timeslots_confirmed_action" model="ir.actions.act_window">
        <field name="name">Confirmed Timeslots</field>
        <field name="type">ir.actions.act_window</field>
        <field name="res_model">timeslots_confirmed</field>
        <field name="view_mode">tree,kanban,form</field>
    </record>
    <!-- explicit list view definition second item -->
    <data>
        <record model="ir.ui.view" id="timeslot_confirmed_list">
            <field name="name">Timeslot list</field>
            <field name="model">timeslots_confirmed</field>
            <field name="arch" type="xml">

                <tree create="false">
                    <field name="timeslots_confirmed_token"/>
                    <field name="timeslots_confirmed_link"/>
                    <field name="meeting_title"/>
                    <field name="firstname"/>
                    <field name="lastname"/>
                    <field name="companyname"/>
                    <field name="email"/>
                    <field name="timeslots_start_date"/>
                    <field name="timeslots_end_date"/>
                    <field name="timeslots_reserved_location"/>
                    <field name="timeslots_reserved_meeting_subject"/>

                </tree>

            </field>

        </record>
    </data>

<!--    the following view is under settings-->
    <data>
        <record id="res_config_settings_view_form" model="ir.ui.view">
            <field name="name">res.config.settings.view.form.inherit.employee.dept</field>
            <field name="model">res.config.settings</field>
            <field name="priority" eval="15"/>
            <field name="inherit_id" ref="base.res_config_settings_view_form"/>
            <field name="arch" type="xml">
                <xpath expr="//div[hasclass('settings')]" position="inside">
                    <div class="app_settings_block" data-string="Meeting scheduler" string="Meeting scheduler"
                         data-key="meeting_scheduler">
                        <h2>Meeting scheduler</h2>
                        <div class="row mt16 o_settings_container">
                            <div class="col-12 col-lg-6 o_setting_box" id="crm_lead">
                                <div class="o_setting_left_pane"/>
                                <div class="o_setting_right_pane">
                                    <label for="meeting_title_default"/>
                                    <div>
                                        <field name="meeting_title_default"/>
                                    </div>
                                    <div class="text-muted content-group mt16">
                                    Set the default title which is shown when the users create new free slots for meetings.
                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-lg-6 o_setting_box" id="crm_lead">
                                <div class="o_setting_left_pane"/>
                                <div class="o_setting_right_pane">
                                    <label for="timeslots_minimal_rest_time_default"/>
                                    <div>
                                        <field name="timeslots_minimal_rest_time_default"/>
                                    </div>
                                    <div class="text-muted content-group mt16">
                                    This defines how long the minimal time remnant can be, when reserving a meeting.
                                        This time remnant can be booked by the guest.
                                    </div>
                                </div>
                            </div>

                            <div class="col-12 col-lg-6 o_setting_box" id="crm_lead">
                                <div class="o_setting_left_pane"/>
                                <div class="o_setting_right_pane">
                                    <label for="locktime_hours_default"/>
                                    <div>
                                        <field name="locktime_hours_default"/>
                                    </div>
                                    <div class="text-muted content-group mt16">
                                    Hours before a meeting can no longer be cancelled by the guest.
                                    </div>
                                </div>
                            </div>
                        </div>
                        <h2>Meeting scheduler</h2>
                        <div class="row mt16 o_settings_container">
                            <div class="col-12 col-lg-6 o_setting_box" id="crm_lead">
                                <div class="o_setting_left_pane"/>
                                <div class="o_setting_right_pane">
                                    <label for="meeting_title_default"/>
                                    <div>
                                        <field name="meeting_title_default"/>
                                    </div>
                                    <div class="text-muted content-group mt16">
                                    Hours before a meeting can no longer be cancelled by the guest
                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-lg-6 o_setting_box" id="crm_lead">
                                <div class="o_setting_left_pane"/>
                                <div class="o_setting_right_pane">
                                    <label for="meeting_title_default"/>
                                    <div>
                                        <field name="meeting_title_default"/>
                                    </div>
                                    <div class="text-muted content-group mt16">
                                    Hours before a meeting can no longer be cancelled by the guest
                                    </div>
                                </div>
                            </div>

                        </div>

                    </div>
                </xpath>
            </field>
        </record>
    </data>
    <!--<data>-->
<!--    </record>-->
<!--        <record id="action_Employee_general_config" model="ir.actions.act_window">-->
<!--        <field name="name">Employee Config</field>-->
<!--        <field name="type">ir.actions.act_window</field>-->
<!--        <field name="res_model">res.config.settings</field>-->
<!--        <field name="view_mode">form</field>-->
<!--        <field name="target">inline</field>-->
<!--        <field name="context">{'module' : 'employee_kdepartment'}</field>-->
<!--    </record>-->
<!--</data>-->


    <data>
        <record id="link_to_guest_view" model="ir.actions.act_url">
            <field name="name">Guest View</field>
            <field name="type">ir.actions.act_url</field>
            <field name="target">self</field>
            <field name="url">http://localhost:8069/meeting_scheduler/guest_view/</field>
        </record>
    </data>




    <!-- Top menu item -->
    <menuitem name="Abilium Meeting Scheduler"
              id="meeting-scheduler-root"
              sequence="0"
              web_icon="meeting_scheduler,static/description/icon.png"
              groups="base.group_user"/>

    <!--              web_icon="meeting_scheduler,static/description/icon.png"-->


    <!-- menu categories -->
    <menuitem name="1. Define Meeting Times"
              id="meeting-scheduler-calender"
              parent="meeting-scheduler-root"
              action="view_action"
              groups="base.group_user"/>
    <menuitem name="2. Select Groups"
              id="meeting-scheduler-user-menu"
              parent="meeting-scheduler-root"
              action="group_action"
              groups="base.group_user"/>
    <menuitem name="3. Bookable Timeslots"
              id="meeting-scheduler-timeslots"
              parent="meeting-scheduler-root"
              action="timeslots_action"
              groups="base.group_user"/>
    <menuitem name="4. Guest View"
              id="meeting-scheduler-guest_view"
              parent="meeting-scheduler-root"
              action="link_to_guest_view"
              groups="base.group_user"/>
    <menuitem name="Timeslots"
              id="meeting-scheduler-timeslots-main"
              parent="meeting-scheduler-root"
              groups="base.group_user"/>
    <menuitem name="5. Reserved Timeslots"
              id="meeting-scheduler-timeslots-reserved"
              parent="meeting-scheduler-timeslots-main"
              action="timeslots_reserved_action"
              groups="base.group_user"/>
    <menuitem name="6. Confirmed Timeslots"
              id="meeting-scheduler-timeslots-confirmed"
              parent="meeting-scheduler-timeslots-main"
              action="timeslots_confirmed_action"
              groups="base.group_user"/>

    <menuitem name="Printed Stuff"
              id="meeting-scheduler-stuff-printer"
              parent="meeting-scheduler-root"
              action="stuff_action"
              groups="base.group_user"/>



</odoo>
